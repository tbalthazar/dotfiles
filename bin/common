#!/bin/bash

# check if the current user has root privileges
check_is_sudo() {
	if [ "$EUID" -ne 0 ]; then
		echo "Please run as root."
		exit
	fi
}

# check if the current user doesn't have root privileges
check_is_not_sudo() {
	if [ "$EUID" -eq 0 ]; then
		echo "Please do not run as root."
		exit
	fi
}

# display usage
usage() {
	echo -e "install.sh\n\tThis script installs my basic setup.\n"
	echo "Usage:"
	echo -e "\tdotfiles - get dotfiles"
	echo -e "\tsetup    - install and configure base programs/services"
}

# get dotfiles
dotfiles() {
  if [[ -e "$HOME/dotfiles" ]]; then
    cd "$HOME/dotfiles"
    git pull
  else
    cd $HOME
    git clone https://github.com/tbalthazar/dotfiles.git "$HOME/dotfiles"
    cd "$HOME/dotfiles"
  fi
  
  # create a directory to backup dotfiles before copying them
  NOW=$(date +'%Y-%m-%d-%H-%M-%S')
  BACKUP_DIR="$HOME/.dotfiles-backup/$NOW"
  mkdir -p $BACKUP_DIR
  
  # find each file/dir in config-files
  FIND_CMD='find ./config-files -maxdepth 1 ! -name config-files -exec basename {} ;'
  
  for file in $($FIND_CMD)
  do
    # backup existing config files
    FILE_TO_BACKUP="$HOME/$file"
    if [ -e "$FILE_TO_BACKUP" ]; then
      cp -R $FILE_TO_BACKUP $BACKUP_DIR
    fi;
  done;
  
  # copy all the dotfiles to the DEST_DIR
  if [[ `uname` == "Linux" ]]; then
    CP_CMD="cd config-files && find . -type f -exec cp --parents \{\} $HOME \;"
  else
    CP_CMD="cd config-files && find . -type f -exec rsync -R \{\} $HOME \;"
  fi
  eval $CP_CMD

  # install/update vim plugins
  vim +PlugUpdate +qall

  source "$HOME/.bash_profile"
}
