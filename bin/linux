#!/bin/bash

USERNAME=$(find /home/* -maxdepth 0 -printf "%f" -type d)
export DEBIAN_FRONTEND=noninteractive

check_x_running() {
  if ! xset q &>/dev/null; then
    echo "Please run in X."
    exit
  fi
}

setup_virtualbox() {
  check_is_sudo
  echo "deb http://httpredir.debian.org/debian/ buster main contrib" >> /etc/apt/sources.list
  apt-get update
  apt-get install -y \
          build-essential \
          linux-headers-$(uname -r) \
          virtualbox-guest-x11
}

install_termite() {
  sudo apt-get install -y \
               git \
               g++ \
               libgtk-3-dev \
               gtk-doc-tools \
               gnutls-bin \
               valac \
               intltool \
               libpcre2-dev \
               libglib3.0-cil-dev \
               libgnutls28-dev \
               libgirepository1.0-dev \
               libxml2-utils \
               gperf

  mkdir -p ~/src/termite-install
  cd ~/src/termite-install

  git clone --recursive https://github.com/thestinger/termite.git
  git clone https://github.com/thestinger/vte-ng.git

  echo export LIBRARY_PATH="/usr/include/gtk-3.0:$LIBRARY_PATH"
  cd vte-ng && ./autogen.sh && make && sudo make install
  cd ../termite && make && sudo make install
  sudo ldconfig
  sudo mkdir -p /lib/terminfo/x
  sudo ln -s \
    /usr/local/share/terminfo/x/xterm-termite \
    /lib/terminfo/x/xterm-termite

  sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/local/bin/termite 60
}

# install base system packages
install_base_packages() {
  cp "/home/$USERNAME/dotfiles/etc/apt/apt.conf.d/80default-release" /etc/apt/apt.conf.d
  echo "deb http://httpredir.debian.org/debian/ buster non-free" >> /etc/apt/sources.list
  echo "deb http://httpredir.debian.org/debian/ sid main" >> /etc/apt/sources.list
  apt-get update
  apt-get -y dist-upgrade
  
  apt-get install -y \
          adduser \
          alsa-utils \
          arandr \
          curl \
          dmenu \
          feh \
          git \
          i3 \
          i3blocks \
          i3lock \
          keepassxc \
          khard \
          lxappearance \
          mpd \
          mutt \
          ncmpcpp \
          network-manager \
          offlineimap \
          openvpn \
          pulseaudio \
          pulseaudio-utils \
          sudo \
          tmux \
          transmission \
          vdirsyncer \
          vim-nox \
          vlc \
          xautolock \
          xbacklight \
          xclip \
          xorg \
          xserver-xorg-video-intel \
          --no-install-recommends

  # non-free packages
  apt-get install -y \
          firmware-iwlwifi

  # unstable packages
  apt-get install -y -t sid \
          firefox
}

# setup sudo for a user
setup_sudo() {
  adduser $USERNAME sudo
}

# setup system services
setup_system_services() {
  mkdir -p /etc/systemd/system

  cp "/home/$USERNAME/dotfiles/etc/systemd/system/i3lock.service" /etc/systemd/system
  systemctl enable i3lock.service
  systemctl start i3lock.service

  # disable system-wide mpd
  systemctl stop mpd.socket
  systemctl stop mpd
  systemctl disable mpd
  
  # copy mpd service
  mkdir -p /etc/systemd/user
  cp "/home/$USERNAME/dotfiles/etc/systemd/user/mpd.service" /etc/systemd/user

  # copy Xorg config
  mkdir -p /usr/share/X11/xorg.conf.d
  cp /home/$USERNAME/dotfiles/usr/share/X11/xorg.conf.d/* /usr/share/X11/xorg.conf.d
}

# setup user services
setup_user_services() {
  systemctl --user enable mpd.service
  systemctl --user start mpd.service

  echo "*/3 * * * * /home/tb/.bin/oimap-quick.sh" >> /tmp/mycron
  echo "0 * * * * /home/tb/.bin/oimap-full.sh" >> /tmp/mycron
  echo "0 * * * * /usr/bin/vdirsyncer sync" >> /tmp/mycron
  crontab /tmp/mycron
}

setup() {
  check_is_sudo
  install_base_packages
  setup_sudo
}

configure_system() {
  check_is_sudo
  check_x_running
  setup_system_services
}

configure_user() {
  check_is_not_sudo
  check_x_running
  setup_user_services
  install_termite
}
